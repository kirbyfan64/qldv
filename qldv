#!/bin/sh

# Copyright 2018 Ryan Gonzalez. All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:

#    * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# (end of license)

VERSION=0.1

error() {
  echo "$@" >&2
  exit 1
}

find_exe() {
  which "$1" >/dev/null 2>&1
}

debug() {
  [ -n "$QLDV_DEBUG" ] && echo "DEBUG: $@" >&2 ||:
}

set -e

if [ -z "$1" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo 'usage: qldv <interpreter path> [<output path>=<input>.nodebug]'
  echo '       qldv -set <executable> [<output interpreter path>=<input>.nodebug]'
  echo '       qldv -find [<executable>=/bin/sh]'
  echo '       qldv -version'
  echo 'set QLDV_DEBUG to have verbose output'
  echo 'man qldv for more info'
  exit
fi

[ -n "$QLDV_DEBUG" ] && set -x ||:

if [ "$1" = "-version" ]; then
  echo "qldv $VERSION"
  echo
  sed -n '/# ''Copyright/,/# (end of license)/p' "$0" | sed 's/^# //' | head -n -1
  exit
fi

find_exe objdump || error 'objdump is required'
find_exe dd || error 'dd is required'
find_exe ldd || error 'ldd is required'
find_exe patchelf || error 'patchelf is required'
find_exe tac || error 'tac is required'

if [ "$1" = "-find" ]; then
  patchelf --print-interpreter "${2:-/bin/sh}"
  exit
fi

if [ "$1" = "-set" ]; then
  doset="$2"
  [ -n "$doset" ] || error 'an executable is required'
  [ -f "$doset" ] || error "$doset does not exist"
  shift
  input=`patchelf --print-interpreter "$doset"`
else
  input="$1"
  [ -n "$input" ] || error 'an interpreter is required'
fi

output="${2:-$input.nodebug}"
[ -f "$input" ] || error "$input does not exist"

debug "input: $input, output: $output"

column=`objdump -s -j .rodata "$input" | grep 'no versi'`
[ -n "$column" ] || error 'Failed to locate address of version string.'

addr=`echo "$column" | sed 's/^ *//' | cut -d ' ' -f1`
[ -n "$addr" ] || error 'Failed to locate address of version string.'
debug "addr: $addr"

if echo "$column" | grep -q 'no versi$'; then
    debug "moving address"
  addr=`echo "$addr" | sed 's/0$/8/'`
fi

fwhere=`objdump -Mintel -d "$input" | grep -B12 "# $addr" | grep 'mov.*edx' | \
        head -1 | grep -o '^ *[0-9a-z]*' | tr -d ' ' ||:`
[ -n "$fwhere" ] || error "Failed to local mov edx instruction prior to usage of $addr."
debug "fwhere: $fwhere"

read -r floc offset <<<"`objdump -Mintel -F -d "$input" | \
  sed "/> (File Offset:.*):/h;/^ *$fwhere:/!d;x" | \
  grep -o -e '^ *[0-9a-z]*' -e '0x[0-9a-z]*)' | tr -d ' )' | tr '\n' ' '`"
[ -n "$floc" ] && [ -n "$offset" ] || \
  error "Failed locate nearest file offset to $fwhere."
debug "floc: $floc, offset: $offset"

foffset=$(expr `printf %d 0x$fwhere` - `printf %d 0x$floc`)
where=$(expr `printf %d $offset` + $foffset)

debug "where: $where"

cp "$input" "$output"
dd if="$input" bs=1 skip=$where count=4 status=none | sed 's/\x8b\x54\x24\x48/\x31\xd2\x90\x90/' | \
  dd of="$output" bs=1 seek=$where count=4 conv=notrunc status=none
chmod +x "$output"

[ -n "$doset" ] && patchelf --set-interpreter "$output" "$doset" ||:

